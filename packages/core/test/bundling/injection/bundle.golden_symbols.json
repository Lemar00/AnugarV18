[
  {
    "name": "AfterRenderPhase"
  },
  {
    "name": "AnonymousSubject"
  },
  {
    "name": "BehaviorSubject"
  },
  {
    "name": "CIRCULAR"
  },
  {
    "name": "COMPLETE_NOTIFICATION"
  },
  {
    "name": "ChangeDetectionScheduler"
  },
  {
    "name": "ConsumerObserver"
  },
  {
    "name": "DestroyRef"
  },
  {
    "name": "EMPTY_ARRAY"
  },
  {
    "name": "EMPTY_OBSERVER"
  },
  {
    "name": "EMPTY_PAYLOAD"
  },
  {
    "name": "EMPTY_SUBSCRIPTION"
  },
  {
    "name": "ENVIRONMENT_INITIALIZER"
  },
  {
    "name": "EnvironmentInjector"
  },
  {
    "name": "ErrorHandler"
  },
  {
    "name": "EventEmitter"
  },
  {
    "name": "INJECTOR"
  },
  {
    "name": "INJECTOR_DEF_TYPES"
  },
  {
    "name": "INJECTOR_SCOPE"
  },
  {
    "name": "InjectFlags"
  },
  {
    "name": "InjectionToken"
  },
  {
    "name": "NEW_LINE"
  },
  {
    "name": "NG_COMP_DEF"
  },
  {
    "name": "NG_ENV_ID"
  },
  {
    "name": "NG_FACTORY_DEF"
  },
  {
    "name": "NG_INJECTABLE_DEF"
  },
  {
    "name": "NG_INJECTOR_DEF"
  },
  {
    "name": "NG_INJ_DEF"
  },
  {
    "name": "NG_PROV_DEF"
  },
  {
    "name": "NOT_YET"
  },
  {
    "name": "NULL_INJECTOR"
  },
  {
    "name": "NgZone"
  },
  {
    "name": "NodeInjectorDestroyRef"
  },
  {
    "name": "NullInjector"
  },
  {
    "name": "ObjectUnsubscribedError"
  },
  {
    "name": "Observable"
  },
  {
    "name": "PendingTasks"
  },
  {
    "name": "R3Injector"
  },
  {
    "name": "RuntimeError"
  },
  {
    "name": "SafeSubscriber"
  },
  {
    "name": "ScopedService"
  },
  {
    "name": "Subject"
  },
  {
    "name": "Subscriber"
  },
  {
    "name": "Subscription"
  },
  {
    "name": "THROW_IF_NOT_FOUND"
  },
  {
    "name": "USE_VALUE"
  },
  {
    "name": "UnsubscriptionError"
  },
  {
    "name": "_AfterRenderImpl"
  },
  {
    "name": "_Injector"
  },
  {
    "name": "__forward_ref__"
  },
  {
    "name": "_bind"
  },
  {
    "name": "_currentInjector"
  },
  {
    "name": "_injectImplementation"
  },
  {
    "name": "activeConsumer"
  },
  {
    "name": "angularZoneInstanceIdProperty"
  },
  {
    "name": "arrRemove"
  },
  {
    "name": "bind"
  },
  {
    "name": "checkStable"
  },
  {
    "name": "config"
  },
  {
    "name": "context"
  },
  {
    "name": "convertToBitFlags"
  },
  {
    "name": "createErrorClass"
  },
  {
    "name": "createInjector"
  },
  {
    "name": "createLFrame"
  },
  {
    "name": "createNotification"
  },
  {
    "name": "deepForEach"
  },
  {
    "name": "deepForEachProvider"
  },
  {
    "name": "errorContext"
  },
  {
    "name": "execFinalizer"
  },
  {
    "name": "forEachSingleProvider"
  },
  {
    "name": "forwardRef"
  },
  {
    "name": "getClosureSafeProperty"
  },
  {
    "name": "getFactoryDef"
  },
  {
    "name": "getInjectImplementation"
  },
  {
    "name": "getInjectableDef"
  },
  {
    "name": "getInjectorDef"
  },
  {
    "name": "getNullInjector"
  },
  {
    "name": "getOriginalError"
  },
  {
    "name": "getOwnDefinition"
  },
  {
    "name": "getPromiseCtor"
  },
  {
    "name": "handleStoppedNotification"
  },
  {
    "name": "handleUnhandledError"
  },
  {
    "name": "hasApplyArgsData"
  },
  {
    "name": "identity"
  },
  {
    "name": "importProvidersFrom"
  },
  {
    "name": "inject"
  },
  {
    "name": "injectArgs"
  },
  {
    "name": "injectDestroyRef"
  },
  {
    "name": "injectInjectorOnly"
  },
  {
    "name": "injectableDefOrInjectorDefFactory"
  },
  {
    "name": "instructionState"
  },
  {
    "name": "internalImportProvidersFrom"
  },
  {
    "name": "isAngularZoneProperty"
  },
  {
    "name": "isEnvironmentProviders"
  },
  {
    "name": "isFunction"
  },
  {
    "name": "isSubscription"
  },
  {
    "name": "isTypeProvider"
  },
  {
    "name": "isValueProvider"
  },
  {
    "name": "makeRecord"
  },
  {
    "name": "ngZoneInstanceId"
  },
  {
    "name": "noop"
  },
  {
    "name": "noop2"
  },
  {
    "name": "observable"
  },
  {
    "name": "onEnter"
  },
  {
    "name": "onLeave"
  },
  {
    "name": "processInjectorTypesWithProviders"
  },
  {
    "name": "resolveForwardRef"
  },
  {
    "name": "setActiveConsumer"
  },
  {
    "name": "setCurrentInjector"
  },
  {
    "name": "setInjectImplementation"
  },
  {
    "name": "stringify"
  },
  {
    "name": "timeoutProvider"
  },
  {
    "name": "updateMicroTaskStatus"
  },
  {
    "name": "walkProviderTree"
  },
  {
    "name": "ɵɵdefineInjectable"
  },
  {
    "name": "ɵɵinject"
  }
]